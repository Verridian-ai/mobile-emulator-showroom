# Mobile Emulator Platform - Environment Configuration Template
# ============================================================================
# IMPORTANT: This is a template file. Copy to .env and fill with real values.
# NEVER commit the actual .env file with real secrets to version control!
# ============================================================================

# ----------------------------------------------------------------------------
# SERVER CONFIGURATION
# ----------------------------------------------------------------------------

# Server port (default: 4175)
# Type: number
# Required: No
PORT=4175

# Legacy port variable for backward compatibility
# Type: number
# Required: No
SHOWROOM_PORT=4175

# Node environment (development, staging, production)
# Type: string
# Required: No (defaults to development)
# Values: development | staging | production
NODE_ENV=development

# ----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# ----------------------------------------------------------------------------

# Rate Limiting - Requests per window
# Type: number
# Required: No (defaults to 100)
# Description: Maximum requests per IP per time window
RATE_LIMIT_MAX=100

# Rate Limiting - Window duration in minutes
# Type: number
# Required: No (defaults to 15)
# Description: Time window for rate limiting in minutes
RATE_LIMIT_WINDOW_MINUTES=15

# Strict Rate Limiting - For auth endpoints
# Type: number
# Required: No (defaults to 10)
STRICT_RATE_LIMIT_MAX=10

# CORS Allowed Origins (comma-separated)
# Type: string (comma-separated URLs)
# Required: No (defaults to same-origin only)
# Example: https://example.com,https://app.example.com
# CORS_ALLOWED_ORIGINS=

# ----------------------------------------------------------------------------
# HTTPS/TLS CONFIGURATION (Production Only)
# ----------------------------------------------------------------------------

# Force HTTPS redirect
# Type: boolean
# Required: No (enabled automatically in production)
# FORCE_HTTPS=true

# SSL Certificate path (if using custom SSL)
# Type: string (file path)
# Required: No (only if using custom certificates)
# SSL_CERT_PATH=/path/to/cert.pem

# SSL Key path (if using custom SSL)
# Type: string (file path)
# Required: No (only if using custom certificates)
# SSL_KEY_PATH=/path/to/key.pem

# ----------------------------------------------------------------------------
# LOGGING & MONITORING
# ----------------------------------------------------------------------------

# Log level (error, warn, info, debug)
# Type: string
# Required: No (defaults to info)
# Values: error | warn | info | debug
LOG_LEVEL=info

# Enable request logging
# Type: boolean
# Required: No (defaults to true in development)
ENABLE_REQUEST_LOGGING=true

# ----------------------------------------------------------------------------
# DATABASE CONFIGURATION (Future Use)
# ----------------------------------------------------------------------------

# Database connection string (when database is added)
# Type: string (connection URL)
# Required: No (not currently used)
# Example: postgresql://user:pass@localhost:5432/dbname
# DATABASE_URL=

# Database connection pool size
# Type: number
# Required: No (defaults to 10)
# DB_POOL_SIZE=10

# ----------------------------------------------------------------------------
# WEBSOCKET CONFIGURATION (Future Use)
# ----------------------------------------------------------------------------

# WebSocket server enabled
# Type: boolean
# Required: No (defaults to false)
# WS_ENABLED=false

# WebSocket port
# Type: number
# Required: No (defaults to PORT + 1)
# WS_PORT=4176

# WebSocket authentication secret
# Type: string (secure random string)
# Required: Yes (if WS_ENABLED=true)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# WS_AUTH_SECRET=

# ----------------------------------------------------------------------------
# SESSION/AUTH CONFIGURATION (Future Use)
# ----------------------------------------------------------------------------

# Session secret for cookie signing
# Type: string (secure random string)
# Required: Yes (when session/auth is implemented)
# Generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# SESSION_SECRET=

# Session duration in milliseconds
# Type: number
# Required: No (defaults to 24 hours)
# SESSION_MAX_AGE=86400000

# ----------------------------------------------------------------------------
# API KEYS & EXTERNAL SERVICES (Future Use)
# ----------------------------------------------------------------------------

# Third-party API keys (add as needed)
# Example:
# ANALYTICS_API_KEY=
# CDN_API_KEY=

# ----------------------------------------------------------------------------
# FEATURE FLAGS
# ----------------------------------------------------------------------------

# Enable compression middleware
# Type: boolean
# Required: No (defaults to true)
ENABLE_COMPRESSION=true

# Enable static file caching
# Type: boolean
# Required: No (defaults to true)
ENABLE_STATIC_CACHE=true

# ----------------------------------------------------------------------------
# VALIDATION RULES
# ----------------------------------------------------------------------------
# - All secrets (passwords, keys, tokens) MUST be at least 32 characters
# - Never use default/example values in production
# - Rotate secrets regularly (every 90 days recommended)
# - Use different secrets for development/staging/production
# - Store production secrets in secure vault (AWS Secrets Manager, etc.)
# ----------------------------------------------------------------------------
